/* eslint-disable */
// @ts-nocheck
"use client";

import React, { useState, useEffect } from 'react';
import * as LucideIcons from 'lucide-react';
import Image from 'next/image';

interface LandingPageProps {
  logoUrl: string;
  generatedCode: string;
}

// This is a container component that will render the AI-generated landing page code.
export function LandingPage({ logoUrl, generatedCode }: LandingPageProps) {
  const [Component, setComponent] = useState<React.ComponentType<{ logoUrl: string }> | null>(null);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    // A simple regex to check if the code seems to contain a React component
    if (!/React\.createElement/.test(generatedCode) && !/jsx\s?\(/.test(generatedCode) && !/<[A-Z]/.test(generatedCode)) {
       setError("The generated code does not appear to be a valid React component. It may be malformed or incomplete. You can try generating again or download the code to inspect it.");
       return;
    }
      
    try {
      // Remove any import/export statements from the generated code, as they are not needed in this context.
      const codeWithoutImports = generatedCode
        .replace(/import.*?;/gs, '')
        .replace(/export default.*?;/gs, '');

      // WARNING: This is a security risk in a real-world application.
      // We are using an IIFE and eval-like behavior to execute code generated by the AI.
      // This is safe in this sandboxed environment, but should not be done
      // with untrusted code on a production server.
      const transformedCode = `
        return (function(React, Image, LucideIcons) {
          const { ${Object.keys(LucideIcons).join(', ')} } = LucideIcons;
          ${codeWithoutImports}
          const componentMatch = /const\\s+([A-Z][A-Za-z0-9_]*)\\s*=\\s*\\(/.exec(codeWithoutImports);
          if (componentMatch && componentMatch[1]) {
            return eval(componentMatch[1]);
          }
          const functionMatch = /function\\s+([A-Z][A-Za-z0-9_]*)\\s*\\(/.exec(codeWithoutImports);
          if (functionMatch && functionMatch[1]) {
            return eval(functionMatch[1]);
          }
          throw new Error("Could not find a React component in the generated code.");
        })(React, Image, LucideIcons);
      `;
      
      const EvaluatedComponent = new Function('React', 'Image', 'LucideIcons', transformedCode)(React, Image, LucideIcons);

      setComponent(() => EvaluatedComponent);
      setError(null);
    } catch (e) {
      console.error("Error evaluating generated code:", e);
      setError(`Failed to render the preview. The generated code might have a syntax error. You can download the code to debug it. Error: ${(e as Error).message}`);
      setComponent(null);
    }

  }, [generatedCode]);

  if (error) {
    return (
        <div className="flex flex-col items-center justify-center h-full bg-red-900/20 p-8 text-center rounded-lg">
            <LucideIcons.AlertTriangle className="h-12 w-12 text-red-400 mb-4" />
            <h2 className="text-2xl font-bold text-red-400 mb-4">Preview Error</h2>
            <p className="text-red-300 mb-4 text-sm">{error}</p>
        </div>
    )
  }

  if (!Component) {
    return (
      <div className="flex flex-col items-center justify-center h-full">
        <LucideIcons.Loader2 className="h-8 w-8 animate-spin text-primary" />
        <p className="mt-4 text-muted-foreground">Loading Preview...</p>
      </div>
    );
  }

  return <Component logoUrl={logoUrl} />;
}
