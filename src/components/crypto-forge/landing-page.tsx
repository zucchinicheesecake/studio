/* eslint-disable */
// @ts-nocheck
"use client";

import React, { useState, useEffect } from 'react';
import { ShieldCheck, Cpu, Layers, GitBranch, Download, BookOpen } from 'lucide-react';
import Image from 'next/image';

interface LandingPageProps {
  logoUrl: string;
  generatedCode: string;
}

// This is a container component that will render the AI-generated landing page code.
// It uses a bit of a hack to evaluate the string as JSX.
// In a real application, you might use a more robust method like MDX.
export function LandingPage({ logoUrl, generatedCode }: LandingPageProps) {
  const [Component, setComponent] = useState<React.ComponentType<{ logoUrl: string }> | null>(null);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    // A simple regex to check if the code seems to contain a React component
    if (!/React\.createElement/.test(generatedCode) && !/jsx\s?\(/.test(generatedCode) && !/<[A-Z]/.test(generatedCode)) {
       setError("The generated code does not appear to be a valid React component. It may be malformed or incomplete. You can try generating again or download the code to inspect it.");
       return;
    }
      
    try {
      // Remove any import statements from the generated code, as they are not needed in this context.
      const codeWithoutImports = generatedCode.replace(/import.*?;/g, '');

      // WARNING: This is a security risk in a real-world application.
      // We are using eval to execute code generated by the AI.
      // This is safe in this sandboxed environment, but should not be done
      // with untrusted code on a production server.
      const transformedCode = new Function('React', 'ShieldCheck', 'Cpu', 'Layers', 'GitBranch', 'Download', 'BookOpen', `return (${codeWithoutImports})`);
      const EvaluatedComponent = transformedCode(React, ShieldCheck, Cpu, Layers, GitBranch, Download, BookOpen);
      setComponent(() => EvaluatedComponent); // Re-render with the new component
      setError(null);
    } catch (e) {
      console.error("Error evaluating generated code:", e);
      setError(`Failed to render the preview. The generated code might have a syntax error. You can download the code to debug it. Error: ${(e as Error).message}`);
      setComponent(null);
    }

  }, [generatedCode]);

  if (error) {
    return (
        <div className="flex flex-col items-center justify-center h-full bg-red-900/20 p-8 text-center">
            <h2 className="text-2xl font-bold text-red-400 mb-4">Preview Error</h2>
            <p className="text-red-300 mb-4">{error}</p>
        </div>
    )
  }

  if (!Component) {
    return (
      <div className="flex items-center justify-center h-full">
        <p>Loading Preview...</p>
      </div>
    );
  }

  return <Component logoUrl={logoUrl} />;
}
